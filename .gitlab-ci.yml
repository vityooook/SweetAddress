stages:
  - prepare
  - build
  - deploy

.prepare_template: &prepare_template
  tags:
    - bf-docker
  image: alpine:latest
  script:
    - apk add --no-cache gettext
    - |
      if [ -z "$FRONTEND_ENV_FILE" ]; then
        echo "Error: FRONTEND_ENV_FILE is not set"
        exit 1
      fi
    - |
      echo "Contents of FRONTEND_ENV_FILE:"
      cat $FRONTEND_ENV_FILE
    - envsubst < $FRONTEND_ENV_FILE > ${CI_PROJECT_DIR}/frontend/.env
    - |
      echo "Contents of generated .env file:"
      cat ${CI_PROJECT_DIR}/frontend/.env
  artifacts:
    paths:
      - ${CI_PROJECT_DIR}/frontend/.env

prepare_development:
  stage: prepare
  environment:
    name: development
  <<: *prepare_template
  only:
    - dev

prepare_production:
  stage: prepare
  environment:
    name: production
  <<: *prepare_template
  only:
    - main

.build_template: &build_template
  stage: build
  tags:
    - bf-docker
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  parallel:
    matrix:
      - TYPE_SERVER: [frontend, backend]
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - |
      REPO_NAME=$(echo "$CI_PROJECT_PATH" | tr '[:upper:]' '[:lower:]')
      IMAGE_NAME="$CI_REGISTRY_IMAGE/$CI_PROJECT_NAME-$TYPE_SERVER"
      SHORT_SHA=${CI_COMMIT_SHA:0:8}
      DESTINATION_TAGS="$IMAGE_NAME:$SHORT_SHA"
      if [[ "$CI_COMMIT_BRANCH" == "main" ]]; then
        DESTINATION_TAGS="$DESTINATION_TAGS $IMAGE_NAME:$CI_COMMIT_BRANCH $IMAGE_NAME:latest"
      elif [[ "$CI_COMMIT_BRANCH" == "dev" ]]; then
        DESTINATION_TAGS="$DESTINATION_TAGS $IMAGE_NAME:$CI_COMMIT_BRANCH $IMAGE_NAME:test"
      fi
      echo "Destination tags: $DESTINATION_TAGS"
      echo "CI_REGISTRY: $CI_REGISTRY"
      echo "CI_REGISTRY_USER: $CI_REGISTRY_USER"
      echo "CI_REGISTRY_PASSWORD: ********"
    - |
      /kaniko/executor \
        --context "${CI_PROJECT_DIR}" \
        --dockerfile "${CI_PROJECT_DIR}/Dockerfile-${TYPE_SERVER}" \
        --destination "$IMAGE_NAME:$SHORT_SHA" \
        $(for tag in $DESTINATION_TAGS; do echo "--destination $tag"; done) \
        --build-arg "TYPE_SERVER=${TYPE_SERVER}" \
        --build-arg "SENTRY_AUTH_TOKEN=${SENTRY_AUTH_TOKEN}" \
        --cleanup

build_development:
  stage: build
  environment:
    name: development
  <<: *build_template
  only:
    - dev

build_production:
  stage: build
  environment:
    name: production
  <<: *build_template
  only:
    - main

.deploy_template: &deploy_template
  stage: deploy
  tags:
    - ad-docker-shell
  script:
    - mkdir -p $DATABASE_PATH/$CI_PROJECT_NAME/$CI_COMMIT_BRANCH
    - mkdir -p $DATABASE_PATH/backups/$CI_PROJECT_NAME/$CI_COMMIT_BRANCH
    - mkdir -p ~/builds/$CI_PROJECT_NAME/$CI_COMMIT_BRANCH
    - rsync -a --delete $CI_PROJECT_DIR/docker-compose.yml ~/builds/$CI_PROJECT_NAME/$CI_COMMIT_BRANCH/
    - cd ~/builds/$CI_PROJECT_NAME/$CI_COMMIT_BRANCH
    - docker compose pull
    - docker compose up -d

deploy_development:
  environment:
    name: development
  <<: *deploy_template
  only:
    - dev

deploy_production:
  environment:
    name: production
  <<: *deploy_template
  only:
    - main
